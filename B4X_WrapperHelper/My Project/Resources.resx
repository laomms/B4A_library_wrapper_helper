<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AbsObjectWrapper" xml:space="preserve">
    <value>package B4AWrapperClass;

import anywheresoftware.b4a.AbsObjectWrapper;
import anywheresoftware.b4a.BA;
import anywheresoftware.b4a.BA.Hide;
import anywheresoftware.b4a.BA.ShortName;
import anywheresoftware.b4a.BA.Version;
import anywheresoftware.b4a.BALayout;
import anywheresoftware.b4a.BA.DependsOn;
import anywheresoftware.b4a.BA.ActivityObject;
import anywheresoftware.b4a.IOnActivityResult;
import anywheresoftware.b4a.BA.Permissions;

import android.content.Intent;
import android.content.Context;
import android.view.View;
import android.app.Activity;


@Version(1.0f)
@ShortName("LibraryName")
@ActivityObject

public class B4AWrapperClass extends AbsObjectWrapper&lt;ActivityName&gt; {

    @Hide
    public static BA ba;
    @Hide
    public static String eventName;
    private static ActivityName activityx;
    private IOnActivityResult ion;
    BALayout layout;
    Intent intent;
    Context context;


    public void Initialize(BA paramBA, String EventName) {
        eventName = EventName.toLowerCase(BA.cul);
        ba = paramBA;
        activityx = new ActivityName();
        setObject(activityx);
        intent = new Intent(BA.applicationContext, ActivityName.class);
        ba.activity.setContentView(BA.applicationContext.getResources().getIdentifier("activity_vhosts", "layout", BA.packageName));
        ba.activity.startActivity(new Intent(ba.activity.getApplicationContext(), ActivityName.class));
    }  
}</value>
  </data>
  <data name="FunctionWrapper" xml:space="preserve">
    <value>package B4AWrapperClass;


import anywheresoftware.b4a.AbsObjectWrapper;
import anywheresoftware.b4a.BA;
import anywheresoftware.b4a.objects.collections.List;
import anywheresoftware.b4a.BA.Hide;
import anywheresoftware.b4a.BA.ShortName;
import anywheresoftware.b4a.BA.Version;
import anywheresoftware.b4a.BA.ActivityObject;
import anywheresoftware.b4a.IOnActivityResult;
import anywheresoftware.b4a.BA.Permissions;
import anywheresoftware.b4a.keywords.Bit;
import anywheresoftware.b4a.objects.IntentWrapper;

import android.content.Intent;
import android.content.Context;
import android.view.View;
import android.app.Activity;


@Version(1.0f)
@ShortName("LibraryName")
@ActivityObject

public class B4AWrapperClass   {

    @Hide
    public static BA ba;
    @Hide
    public static String eventName;
    private static MainActivity activityx;
    private IOnActivityResult ion;
    Intent intent;
    Context context;

    public void Initialize(BA paramBA, String paramString) {
        eventName = paramString.toLowerCase(BA.cul);
        ba = paramBA;
        MainActivity activityx = new MainActivity();
        String str = paramString.toLowerCase(BA.cul);
        setObject(activityx);
    }

	
     public void function() {
		ion = new IOnActivityResult() {
			
			@Override
			public void ResultArrived(int arg0, Intent data) {
				BA.Log("ResultArrived");
				B4AWrapperClass.ba.raiseEventFromDifferentThread(this, null, 0, B4AWrapperClass.eventName + "_result", true, new Object[] {object});
                } else {
                    
                }
			}
		};
		ba.startActivityForResult(ion, mIntent);
	}
}</value>
  </data>
  <data name="onActivityResultTip" xml:space="preserve">
    <value>public void startFunction() {
        ion = new IOnActivityResult() {
            @Override
            public void ResultArrived(int resultCode, Intent data) {
                BA.Log("ResultArrived");
                if (resultCode == Activity.RESULT_OK) {
                    BA.Log("RESULT_OK");
                    //...
                }
                ba.raiseEvent(B4AWrapperClass.this, eventName + "_result", true, intent);
            }
        };
        ba.startActivityForResult(ion, new Intent(BA.applicationContext, WrapperActivity.class));
    }</value>
  </data>
  <data name="ViewWrapper1" xml:space="preserve">
    <value>package ViewNameWrapper;


import anywheresoftware.b4a.AbsObjectWrapper;
import anywheresoftware.b4a.BA;
import anywheresoftware.b4a.BA.ActivityObject;
import anywheresoftware.b4a.BA.DesignerProperties;
import anywheresoftware.b4a.BA.Events;
import anywheresoftware.b4a.BA.Hide;
import anywheresoftware.b4a.BA.Property;
import anywheresoftware.b4a.BA.RaisesSynchronousEvents;
import anywheresoftware.b4a.BA.ShortName;
import anywheresoftware.b4a.BA.Version;
import anywheresoftware.b4a.keywords.Common.DesignerCustomView;
import anywheresoftware.b4a.objects.CustomViewWrapper;
import anywheresoftware.b4a.objects.LabelWrapper;
import anywheresoftware.b4a.objects.PanelWrapper;
import anywheresoftware.b4a.objects.ViewWrapper;
import anywheresoftware.b4a.objects.collections.Map;

import android.content.Intent;
import android.content.Context;
import android.view.View;
import android.app.Activity;

@Version(1.00f)
@ShortName("LibraryName")
@ActivityObject
@Events(values={"CheckedChange(Checked As Boolean)"})
@DesignerProperties(values = {
        @Property(key="Checked", displayName="Checked", defaultValue="False", fieldType="Boolean")
})

public class ViewNameWrapper extends ViewWrapper&lt;ViewName&gt; implements DesignerCustomView{
    private BA ba;
    private String eventName;
    private ViewName ViewActivity;

    @Override
    public void DesignerCreateView(PanelWrapper panelWrapper, LabelWrapper labelWrapper, Map map) {
        getObject().setChecked((Boolean)map.Get("Checked"));
        CustomViewWrapper.replaceBaseWithView2(panelWrapper, getObject());
    }

    @Override
    public void _initialize(final BA ba, Object o, String s) {
        ViewActivity = new ViewName(ba.context);
        this.ba=ba;
        eventName = s.toLowerCase(BA.cul);
        setObject(ViewActivity);
        innerInitialize(ba, eventName, true);

        //switchbutton.setChecked(true);
        //switchbutton.isChecked();
        
        if (ba.subExists(eventName + "_checkedchange")) {
            getObject().setOnCheckedChangeListener(new ViewName.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(ViewName view, boolean isChecked) {
                   ba.raiseEventFromUI(switchbutton,eventName + "_checkedchange", isChecked);
                }
            });
        }
    }
    public boolean getChecked() {
        return getObject().isChecked();
    }
    public void setChecked(boolean Value) {
        getObject().setChecked(Value);
    }
}</value>
  </data>
  <data name="ViewWrapper2" xml:space="preserve">
    <value>package ViewNameWrapper;

import anywheresoftware.b4a.AbsObjectWrapper;
import anywheresoftware.b4a.BA;
import anywheresoftware.b4a.BA.ActivityObject;
import anywheresoftware.b4a.BA.DesignerProperties;
import anywheresoftware.b4a.BA.Events;
import anywheresoftware.b4a.BA.Hide;
import anywheresoftware.b4a.BA.Property;
import anywheresoftware.b4a.BA.RaisesSynchronousEvents;
import anywheresoftware.b4a.BA.ShortName;
import anywheresoftware.b4a.BA.Version;
import anywheresoftware.b4a.BALayout;
import anywheresoftware.b4a.keywords.Common.DesignerCustomView;
import anywheresoftware.b4a.keywords.constants.Colors;
import anywheresoftware.b4a.objects.CustomViewWrapper;
import anywheresoftware.b4a.objects.LabelWrapper;
import anywheresoftware.b4a.objects.PanelWrapper;
import anywheresoftware.b4a.objects.ViewWrapper;
import anywheresoftware.b4a.objects.collections.Map;

import android.content.Intent;
import android.content.Context;
import android.view.View;
import android.app.Activity;

@Version(1.00f)
@ShortName("LibraryName")
@ActivityObject

public class ViewNameWrapper extends ViewWrapper&lt;ViewName&gt; implements DesignerCustomView{
    private BA ba;
    private String eventName;
    private ViewName ViewActivity;

    @Override
    public void DesignerCreateView(PanelWrapper panelWrapper, LabelWrapper labelWrapper, Map map) {
        ViewGroup vg = (ViewGroup) panelWrapper.getObject().getParent();
        AddToParent(vg, panelWrapper.getLeft(), panelWrapper.getTop(), panelWrapper.getWidth(), panelWrapper.getHeight());
        panelWrapper.RemoveView();
    }

    @Override
    public void _initialize(final BA ba, Object o, String s) {
        this.eventName = s.toLowerCase(BA.cul);
        this.ba = ba;
        ViewActivity = new ViewName(ba.context);
        this.setObject(ViewActivity);
        addListener();

    }
	
	@Hide
    public void addListener(){
        cv.setCallback(new NiceSpinner.Callback() {
            public void item_clicked() {
              if (ba.subExists(eventName + "_item_clicked")) {
                ba.raiseEvent2(ba, false, eventName + "_item_clicked", true, new Object[0]);
              }
            }

        });
    }

    @Hide
    public void AddToParent(ViewGroup Parent, @BA.Pixel int left, @BA.Pixel int top, @BA.Pixel int width, @BA.Pixel int height) {
        Parent.addView(ViewActivity, new BALayout.LayoutParams(left, top, width, height));
    }

}</value>
  </data>
</root>